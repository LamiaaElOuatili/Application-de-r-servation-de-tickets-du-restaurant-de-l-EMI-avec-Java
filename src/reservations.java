

import java.sql.*;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author ADMIN
 */
public class reservations extends javax.swing.JFrame {
    
    String TicketCode = "";
    int p = 0;
    

    /**
     * Creates new form reservations
     */
    public reservations() {
        initComponents();
        setSize(770, 522);
        setLocation(200,100);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    Connection con;
    PreparedStatement ps;
    ResultSet rs;
    PreparedStatement ps2;
    ResultSet rs2;
    PreparedStatement ps3;
    ResultSet rs3;
    PreparedStatement pst;
    ResultSet rst;
    int code;
    Calendar cal;
    int dayOfWeek;
    int Mle;
    
    
    String db_driver = "com.mysql.cj.jdbc.Driver";
    
    private static int generateRandomCode() {
    Random random = new Random();
    return random.nextInt(10000);  // Generates a random number between 0 and 9999
  }
    
    private void Reservation(){
        
        
        // To get the day of the week
        cal = Calendar.getInstance();
        dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);
        
        
        // PETIT DEJEUNER
        if (LB.isSelected()){
            TicketCode = "LB";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE,  6);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 5); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                default:
                    break;
            }
        } else if (MB.isSelected()){
            TicketCode = "MB";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 6); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                default:
                    break;
            }
        } else if (MRB.isSelected()) {
            TicketCode = "MRB";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 7); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 6);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                default:
                    break;
            }
        }else if (JB.isSelected()) {
            TicketCode = "JB";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 1); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 6);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                default:
                    break;
            }
        }else if (VB.isSelected()) {
            TicketCode = "VB";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 2); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 6);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                default:
                    break;
            }
        }else if (SB.isSelected()) {
            TicketCode = "SB";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 3); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 6);
                    break;
                default:
                    break;
            }
        }else if (DB.isSelected()) {
            TicketCode = "DB";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 6);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 4); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                default:
                    break;
            }
        }
        
        
        
        // DEJEUNER
        else if (LL.isSelected()) {
            TicketCode = "LL";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE,  6);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 5); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                default:
                    break;
            }
        }else if (ML.isSelected()){
            TicketCode = "ML";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 6); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                default:
                    break;
            }
        }else if (MRL.isSelected()) {
            TicketCode = "MRL";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 7); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 6);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                default:
                    break;
            }
        }else if (JL.isSelected()) {
            TicketCode = "JL";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 1); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 6);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                default:
                    break;
            }
        }else if (VL.isSelected()) {
            TicketCode = "VL";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 2); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 6);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                default:
                    break;
            }
        }else if (SL.isSelected()) {
            TicketCode = "SL";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 3); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 6);
                    break;
                default:
                    break;
            }
        }
        else if (DL.isSelected()) {
            TicketCode = "DL";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 6);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 4); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                default:
                    break;
            }
        }
        
        
        // DINNER
        else if (LD.isSelected()) {
            TicketCode = "LD";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE,  6);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 5); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                default:
                    break;
            }
        }else if (MD.isSelected()) {
            TicketCode = "MD";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 6); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                default:
                    break;
            }
        }else if (MRD.isSelected()) {
            TicketCode = "MRD";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 7); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 6);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                default:
                    break;
            }
        }else if (JD.isSelected()) {
            TicketCode = "JD";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 1); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 6);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                default:
                    break;
            }
        }else if (VD.isSelected()) {
            TicketCode = "VD";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 2); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 6);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                default:
                    break;
            }
        }else if (SD.isSelected()) {
            TicketCode = "SD";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 4);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 3); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 6);
                    break;
                default:
                    break;
            }
        }else if (DD.isSelected()) {
            TicketCode = "DD";
            switch (dayOfWeek) {
                case Calendar.MONDAY:
                    cal.add(Calendar.DATE, 6);
                    break;
                case Calendar.TUESDAY:
                    cal.add(Calendar.DATE, 5);
                    break;
                case Calendar.WEDNESDAY:
                    cal.add(Calendar.DATE, 4); 
                    break;
                case Calendar.THURSDAY:
                    cal.add(Calendar.DATE, 3);
                    break;
                case Calendar.FRIDAY:
                    cal.add(Calendar.DATE, 2);
                    break;
                case Calendar.SATURDAY:
                    cal.add(Calendar.DATE, 1);
                    break;
                case Calendar.SUNDAY:
                    cal.add(Calendar.DATE, 7);
                    break;
                default:
                    break;
            }
        }
        
        Date date = new Date(cal.getTimeInMillis());
        java.sql.Date sqlDate = java.sql.Date.valueOf(date.toString());
        
        // To get the Random Code 
        code = generateRandomCode();
        String Query = "SELECT CodeR FROM reservations WHERE CodeR = ?";
      
                
        
        try {
            Class.forName(db_driver);
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/resum5?zeroDateTimeBehavior=CONVERT_TO_NULL","root","000000");
            
            String sql2 = "SELECT Mle From loginout WHERE id = (SELECT MAX(id) FROM loginout)";
            ps2 = con.prepareStatement(sql2);
            rs2 = ps2.executeQuery();
            
            if (rs2.next()) {
                Mle = rs2.getInt(1);
            } 
            
            String sql3 = "SELECT Mle FROM reservations WHERE Mle = ? AND TicketCode = ?";
            ps3 = con.prepareStatement(sql3);
            ps3.setInt(1,Mle);
            ps3.setString(2,TicketCode);
            rs3 = ps3.executeQuery();
            if (rs3.next()) {
              // Code already exists in the database, so generate a new one
              p = p + 1;
            }
            
            if (p==0) {
            
            ps = con.prepareStatement("INSERT INTO reservations (Mle, TicketCode, DateR, CodeR) values (?,?,?,?)");
            pst = con.prepareStatement(Query);
            
            pst.setInt(1, code);
            
            rst = pst.executeQuery();
            if (rst.next()) {
              // Code already exists in the database, so generate a new one
              code = generateRandomCode();
            }
            
            ps.setInt(1, Mle);
            ps.setString(2, TicketCode);
            ps.setDate(3, sqlDate);
            ps.setInt(4, code);
            
            ps.executeUpdate();
            
            JOptionPane.showMessageDialog(null, "Réservation en succès.");
            }
            
            else {
                JOptionPane.showMessageDialog(null, "Vous avez déjà réserver ce ticket.");
            }
                    
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(reservations.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        LD = new javax.swing.JCheckBox();
        MRB = new javax.swing.JCheckBox();
        JB = new javax.swing.JCheckBox();
        VB = new javax.swing.JCheckBox();
        SB = new javax.swing.JCheckBox();
        DB = new javax.swing.JCheckBox();
        LB = new javax.swing.JCheckBox();
        ML = new javax.swing.JCheckBox();
        MRL = new javax.swing.JCheckBox();
        JL = new javax.swing.JCheckBox();
        VL = new javax.swing.JCheckBox();
        SL = new javax.swing.JCheckBox();
        DL = new javax.swing.JCheckBox();
        MB = new javax.swing.JCheckBox();
        MD = new javax.swing.JCheckBox();
        MRD = new javax.swing.JCheckBox();
        JD = new javax.swing.JCheckBox();
        VD = new javax.swing.JCheckBox();
        SD = new javax.swing.JCheckBox();
        DD = new javax.swing.JCheckBox();
        LL = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        validerBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        backgroud2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("resum5 réservations");
        getContentPane().setLayout(null);
        getContentPane().add(jSeparator2);
        jSeparator2.setBounds(10, 310, 730, 40);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(10, 200, 730, 40);
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 230, 120, 80);

        jLabel1.setPreferredSize(new java.awt.Dimension(50, 50));
        getContentPane().add(jLabel1);
        jLabel1.setBounds(30, 130, 70, 70);
        getContentPane().add(jLabel3);
        jLabel3.setBounds(20, 320, 121, 0);

        buttonGroup1.add(LD);
        LD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LDActionPerformed(evt);
            }
        });
        getContentPane().add(LD);
        LD.setBounds(140, 350, 19, 19);

        buttonGroup1.add(MRB);
        MRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MRBActionPerformed(evt);
            }
        });
        getContentPane().add(MRB);
        MRB.setBounds(320, 150, 19, 19);

        buttonGroup1.add(JB);
        JB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBActionPerformed(evt);
            }
        });
        getContentPane().add(JB);
        JB.setBounds(410, 150, 19, 19);

        buttonGroup1.add(VB);
        VB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VBActionPerformed(evt);
            }
        });
        getContentPane().add(VB);
        VB.setBounds(510, 150, 19, 19);

        buttonGroup1.add(SB);
        SB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SBActionPerformed(evt);
            }
        });
        getContentPane().add(SB);
        SB.setBounds(600, 150, 19, 19);

        buttonGroup1.add(DB);
        DB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DBActionPerformed(evt);
            }
        });
        getContentPane().add(DB);
        DB.setBounds(680, 150, 19, 19);

        buttonGroup1.add(LB);
        LB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LBActionPerformed(evt);
            }
        });
        getContentPane().add(LB);
        LB.setBounds(140, 150, 19, 19);

        buttonGroup1.add(ML);
        ML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MLActionPerformed(evt);
            }
        });
        getContentPane().add(ML);
        ML.setBounds(230, 250, 19, 19);

        buttonGroup1.add(MRL);
        MRL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MRLActionPerformed(evt);
            }
        });
        getContentPane().add(MRL);
        MRL.setBounds(320, 250, 19, 19);

        buttonGroup1.add(JL);
        JL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JLActionPerformed(evt);
            }
        });
        getContentPane().add(JL);
        JL.setBounds(410, 250, 19, 19);

        buttonGroup1.add(VL);
        VL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VLActionPerformed(evt);
            }
        });
        getContentPane().add(VL);
        VL.setBounds(510, 250, 19, 19);

        buttonGroup1.add(SL);
        SL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SLActionPerformed(evt);
            }
        });
        getContentPane().add(SL);
        SL.setBounds(600, 250, 19, 19);

        buttonGroup1.add(DL);
        DL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DLActionPerformed(evt);
            }
        });
        getContentPane().add(DL);
        DL.setBounds(680, 250, 19, 19);

        buttonGroup1.add(MB);
        MB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MBActionPerformed(evt);
            }
        });
        getContentPane().add(MB);
        MB.setBounds(230, 150, 19, 19);

        buttonGroup1.add(MD);
        MD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MDActionPerformed(evt);
            }
        });
        getContentPane().add(MD);
        MD.setBounds(230, 350, 19, 19);

        buttonGroup1.add(MRD);
        MRD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MRDActionPerformed(evt);
            }
        });
        getContentPane().add(MRD);
        MRD.setBounds(320, 350, 19, 19);

        buttonGroup1.add(JD);
        JD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JDActionPerformed(evt);
            }
        });
        getContentPane().add(JD);
        JD.setBounds(410, 350, 19, 19);

        buttonGroup1.add(VD);
        VD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VDActionPerformed(evt);
            }
        });
        getContentPane().add(VD);
        VD.setBounds(510, 350, 19, 19);

        buttonGroup1.add(SD);
        SD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SDActionPerformed(evt);
            }
        });
        getContentPane().add(SD);
        SD.setBounds(600, 350, 19, 19);

        buttonGroup1.add(DD);
        DD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DDActionPerformed(evt);
            }
        });
        getContentPane().add(DD);
        DD.setBounds(680, 350, 19, 19);

        buttonGroup1.add(LL);
        LL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LLActionPerformed(evt);
            }
        });
        getContentPane().add(LL);
        LL.setBounds(140, 250, 19, 19);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Jour", "LUNDI", "MARDI", "MERCREDI", "JEUDI", "VENDREDI", "SAMEDI", "DIMANCHE"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 100, 730, 310);

        validerBtn.setBackground(new java.awt.Color(102, 102, 255));
        validerBtn.setForeground(new java.awt.Color(255, 255, 255));
        validerBtn.setText("Valider");
        validerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validerBtnActionPerformed(evt);
            }
        });
        getContentPane().add(validerBtn);
        validerBtn.setBounds(330, 430, 75, 23);

        jLabel4.setFont(new java.awt.Font("Segoe UI Historic", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 153, 255));
        jLabel4.setText("Cochez les repas que vous voulez reserver:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(140, 50, 530, 32);

        backgroud2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/reservations.png"))); // NOI18N
        getContentPane().add(backgroud2);
        backgroud2.setBounds(-20, 0, 140, 469);

        jPanel1.setBackground(new java.awt.Color(229, 229, 255));

        jButton1.setBackground(new java.awt.Color(102, 102, 255));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("précédent");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(541, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(430, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(17, 17, 17))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(120, 0, 630, 470);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LDActionPerformed

    private void MRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MRBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MRBActionPerformed

    private void JBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JBActionPerformed

    private void VBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_VBActionPerformed

    private void SBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SBActionPerformed

    private void DBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DBActionPerformed

    private void LBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LBActionPerformed

    private void MLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MLActionPerformed

    private void MRLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MRLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MRLActionPerformed

    private void JLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JLActionPerformed

    private void VLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_VLActionPerformed

    private void SLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SLActionPerformed

    private void DLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DLActionPerformed

    private void MBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MBActionPerformed

    private void MDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MDActionPerformed

    private void MRDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MRDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MRDActionPerformed

    private void JDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JDActionPerformed

    private void VDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_VDActionPerformed

    private void SDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SDActionPerformed

    private void DDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DDActionPerformed

    private void LLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LLActionPerformed

    private void validerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validerBtnActionPerformed
        // TODO add your handling code here:
        Reservation();
        
    }//GEN-LAST:event_validerBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        userMenu f4 = new userMenu();
        f4.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(reservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(reservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(reservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(reservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new reservations().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox DB;
    private javax.swing.JCheckBox DD;
    private javax.swing.JCheckBox DL;
    private javax.swing.JCheckBox JB;
    private javax.swing.JCheckBox JD;
    private javax.swing.JCheckBox JL;
    private javax.swing.JCheckBox LB;
    private javax.swing.JCheckBox LD;
    private javax.swing.JCheckBox LL;
    private javax.swing.JCheckBox MB;
    private javax.swing.JCheckBox MD;
    private javax.swing.JCheckBox ML;
    private javax.swing.JCheckBox MRB;
    private javax.swing.JCheckBox MRD;
    private javax.swing.JCheckBox MRL;
    private javax.swing.JCheckBox SB;
    private javax.swing.JCheckBox SD;
    private javax.swing.JCheckBox SL;
    private javax.swing.JCheckBox VB;
    private javax.swing.JCheckBox VD;
    private javax.swing.JCheckBox VL;
    private javax.swing.JLabel backgroud2;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton validerBtn;
    // End of variables declaration//GEN-END:variables
}
